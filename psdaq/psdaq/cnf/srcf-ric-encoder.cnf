if not platform: platform = '3'

ld_lib_path = f'LD_LIBRARY_PATH={CONDA_PREFIX}/epics/lib/linux-x86_64:{CONDA_PREFIX}/pcas/lib/linux-x86_64'
epics_env = f'{ld_lib_path}'
#epics_env = 'EPICS_PVA_ADDR_LIST=172.21.151.255'

collect_host = 'drp-srcf-mon001'

slow_group = 4
groups = platform + f' {slow_group}'
hutch, user = ('tst', 'tstopr')
url  = 'https://pswww.slac.stanford.edu/ws-auth/devlgbk/'
#cdb  = 'https://pswww.slac.stanford.edu/ws-auth/configdb/ws'
cdb  = 'https://pswww.slac.stanford.edu/ws-auth/devconfigdb/ws'

#
#  drp variables
#
prom_dir = f'/cds/group/psdm/psdatmgr/etc/config/prom/{hutch}' # Prometheus
data_dir = f'/cds/data/drpsrcf'
trig_dir = f'/cds/home/c/claus/lclsii/daq/runs/eb/data/srcf'

task_set = 'taskset -c 4-63'
pvaAddr  = 'pva_addr=172.21.152.78' # mon001
scripts  = f'script_path={trig_dir}'
#network  = 'ep_provider=sockets,ep_domain=eno1'

# To enable interpolation, set high_rate to True
high_rate = True

if high_rate:
  kwargsEncoder = f'pebbleBufCount=65536,pebbleBufSize=4096,slowGroup={slow_group}'
else:
  kwargsEncoder = 'pebbleBufCount=65536,pebbleBufSize=4096'

std_opts = f'-P {hutch} -C {collect_host} -M {prom_dir}' # -k {network}'
std_opts0 = f'{std_opts} -d /dev/datadev_0 -o {data_dir} -k {pvaAddr}'
std_opts1 = f'{std_opts} -d /dev/datadev_1 -o {data_dir} -k {pvaAddr}'

teb_cmd  = task_set+' teb '            +std_opts + f' -k {scripts},mon_throttle=40' # pulse ID ticks
meb_cmd  = task_set+' monReqServer '   +std_opts

drp_cmd0 = task_set+' drp '            +std_opts0
drp_cmd1 = task_set+' drp '            +std_opts1
udp_cmd0 = task_set+' drp_udpencoder ' +std_opts0 + f' -k {kwargsEncoder}'
udp_cmd1 = task_set+' drp_udpencoder ' +std_opts1 + f' -k {kwargsEncoder}'
tpr_cmd  = task_set+' tpr_trigger '               + f' -H {hutch} -C {collect_host} -t a -c 0 -o 1 -d 2 -w 10'

#
#  ami variables
#
heartbeat_period = 1000 # units are ms

ami_workers_per_node = 4
ami_worker_nodes = ["drp-srcf-mon001"]
ami_num_workers = len(ami_worker_nodes)
ami_manager_node = "drp-srcf-mon001"

# procmgr FLAGS: <port number> static port number to keep executable
#                              running across multiple start/stop commands.
#
# HOST       UNIQUEID      FLAGS  COMMAND+ARGS
# list of processes to run
#   required fields: id, cmd
#   optional fields: host, port, flags, conda, env, rtprio
#     flags:
#        'x' or 'X'  -> xterm: open small or large xterm for process console
#        's'         -> stop: sends ctrl-c to process
#        'u'         -> uniqueid: use 'id' as detector alias (supported by acq, cam, camedt, evr, and simcam)

procmgr_config = [
 {                        id:'groupca',flags:'s', env:epics_env, cmd:f'groupca DAQ:NEH 3 {groups}'},
 {                        id:'procstat', flags:'p', cmd:'procstat p'+platform+'.cnf.last'},
 { host: collect_host,    id:'control', flags:'spu', env:epics_env, cmd:f'control -P {hutch} -B DAQ:NEH -x 3 -C BEAM --user {user} --url {url} -d {cdb}/configDB -t trigger -S 1'},
 {                        flags:'sp', id:'control_gui', cmd:f'control_gui -E -t 30000 -l WARNING -H {collect_host} --user {user}'},
 # trigger event builder
 { host: 'drp-srcf-cmp029', id:'teb0', flags:'spu', cmd:f'{teb_cmd}'},
 # FakeCam
 { host: 'drp-srcf-cmp029', id:'cam_0', flags:'spu', cmd:f'{drp_cmd0} -l 0x2 -D fakecam'},
 # ...drp: loopback on port 5007
#{ host: 'drp-srcf-cmp029', id:'encoder_0', flags:'spu', cmd:udp_cmd1+' -v -l 0x1 -L 5007'},  # Loopback
 # ...drp:
 { host: 'drp-srcf-cmp029', id:'encoder_0', flags:'spux', rtprio:'50', cmd:udp_cmd1+' -l 0x1'},
### { host: 'drp-neh-ctl002',  id:'tprtrig',   flags:'spux',              cmd:f'{tpr_cmd}'},
# ...sim: 172.21.152.50 = drp-srcf-cmp029, 5008 = interpolate port
 { host: 'drp-neh-ctl002', id:'sim_udpencoder', flags:'s', cmd:f'sim_udpencoder -a 172.21.152.50 -p {slow_group}'}, # -f ~cpo/encoder/g_pi_0.1urs.csv'},  # -d 5008'},
# { host: 'drp-neh-ctl002', id:'sim_udpencoder', flags:'sp', cmd:'sim_udpencoder -a 172.21.152.50'},
 { host: 'drp-srcf-cmp029', id:'timing_1', flags:'spu', cmd:f'{drp_cmd1} -l 0x8 -D ts'},
 #  ...drp: loopback on port 5007 AND verbose
#{ host: 'drp-srcf-cmp029', id:'encoder_0', flags:'spu', cmd:udp_cmd1+' -l 0x1 -L 5007 -v'},
]

#
# ami
#
procmgr_ami = [
  { host:ami_manager_node, id:'ami-global',  flags:'s', env:epics_env, cmd:f'ami-global --hutch {hutch} --prometheus-dir {prom_dir} -N 0 -n {ami_num_workers}' },
  { host:ami_manager_node, id:'ami-manager', flags:'s', cmd:f'ami-manager --hutch {hutch} --prometheus-dir {prom_dir} -n {ami_num_workers*ami_workers_per_node} -N {ami_num_workers}' },
  {                        id:'ami-client',  flags:'s', cmd:f'ami-client -H {ami_manager_node} --prometheus-dir {prom_dir} --hutch {hutch}' },
]
#
# ami workers
#

for N, worker_node in enumerate(ami_worker_nodes):
    procmgr_ami.append({ host:worker_node, id:f'ami-meb{N}', flags:'spu',
                         cmd:f'{meb_cmd} -d -n 64 -q {ami_workers_per_node}' })
    procmgr_ami.append({ host:worker_node, id:f'ami-node_{N}', flags:'s',
                         cmd:f'ami-node --hutch {hutch} --prometheus-dir {prom_dir} -N {N} -n {ami_workers_per_node} -H {ami_manager_node} --log-level warning worker -b {heartbeat_period} psana2://shmem={hutch}' })

procmgr_config.extend(procmgr_ami)
