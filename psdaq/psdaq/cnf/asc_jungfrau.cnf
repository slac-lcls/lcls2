if not platform: platform = '2'

ld_lib_path = f'LD_LIBRARY_PATH={CONDA_PREFIX}/epics/lib/linux-x86_64:{CONDA_PREFIX}/pcas/lib/linux-x86_64'
epics_env = 'EPICS_PVA_ADDR_LIST=172.21.58.255'+' '+ld_lib_path

collect_host = 'drp-det-cmp001'

groups = platform+' 0'
hutch, station, user, password = ('asc', 1, 'detopr', 'pcds')
auth = ' --user {:} --password {:} '.format(user,password)
url  = ' --url https://pswww.slac.stanford.edu/ws-auth/lgbk/ '
#cdb  = 'https://pswww.slac.stanford.edu/ws-auth/devconfigdb/ws'
cdb  = 'https://pswww.slac.stanford.edu/ws-auth/configdb/ws'

#
#  drp variables
#
prom_dir = '/cds/group/psdm/psdatmgr/etc/config/prom/asc' # Prometheus
#data_dir = '/ffb01/data'
data_dir = '/u2/pcds/pds'
#kwargs   = 'ep_fabric="172.21.58.0/24",ep_domain=enp197s0'
kwargs   = 'ep_provider=sockets,ep_domain=enp197s0'
task_set = 'taskset 0xffbfeffbfe '
std_opts = '-P '+hutch+' -C '+collect_host+' -M '+prom_dir+' -o '+data_dir+' -k '+kwargs+' -d /dev/datadev_%d'

drp_cmd0 = task_set+'drp '      +(std_opts%0)+' -k batching=yes '
drp_cmd0e = task_set+'drp '     +(std_opts%0)+' -k batching=yes '
drp_cmd1e = task_set+'drp '     +(std_opts%1)+' -k batching=yes '
drp_cmd1 = task_set+'drp '      +(std_opts%1)+' -k batching=yes '
drp_cmd2 = task_set+'drp '      +(std_opts%2)+' -k batching=yes '
pva_cmd0 = task_set+'drp_pva '  +(std_opts%0)+' -k batching=yes '
pva_cmd1 = task_set+'drp_pva '  +(std_opts%1)+' -k batching=yes '
bld_cmd0 = task_set+'drp_bld '  +(std_opts%0)+' -k batching=yes,interface=eno1 '
bld_cmd1 = task_set+'drp_bld '  +(std_opts%1)+' -k batching=yes,interface=eno1 '

elog_cfg = '/cds/group/pcds/dist/pds/det/misc/elog.txt'

ea_cfg = '/cds/group/pcds/dist/pds/det/misc/epicsArch.txt'
ea_cmd0 = task_set+'epicsArch '+(std_opts%0)+' -k batching=yes '+ea_cfg
ea_cmd1 = task_set+'epicsArch '+(std_opts%1)+' -k batching=yes '+ea_cfg

#
#  ami variables
#
heartbeat_period = 1000 # units are ms

##ami_workers_per_node = 4
ami_workers_per_node = 1
ami_worker_nodes = ["drp-det-cmp001"]
ami_manager_node = "drp-det-cmp001"
ami_num_workers = len(ami_worker_nodes)

pyxpm_optsdb = '--db https://pswww.slac.stanford.edu/ws-auth/devconfigdb/ws/,configDB,det,XPM -P DAQ:ASC:XPM:%d'

# procmgr FLAGS: <port number> static port number to keep executable
#                              running across multiple start/stop commands.
#                "X" open xterm
#                "s" send signal to child when stopping
#
# HOST       UNIQUEID      FLAGS  COMMAND+ARGS
# list of processes to run
#   required fields: id, cmd
#   optional fields: host, port, flags, conda, env, rtprio
#     flags:
#        'x' or 'X'  -> xterm: open small or large xterm for process console
#        's'         -> stop: sends ctrl-c to process
#        'u'         -> uniqueid: use 'id' as detector alias (supported by acq, cam, camedt, evr, and simcam)

procmgr_config = [
 { host: 'drp-det-cmp001', id:'pyxpm-0' , port:'29451', flags:'s', env:epics_env, cmd:'pyxpm --ip 10.0.0.102 '+pyxpm_optsdb%0}, # XTPG
 { host: 'drp-det-cmp001', id:'pvrtmon',  port:'29460', flags:'s', env:epics_env, cmd:f'epics_exporter -H asc -M {prom_dir} -P DAQ:ASC:XPM:0 RunTime Run NumL0Acc L0AccRate NumL0Inp L0InpRate DeadFrac'},

 {                         id:'xpmpva' ,     flags:'s',   env:epics_env, cmd:'xpmpva DAQ:ASC:XPM:0'},
# {                         id:'groupca',     flags:'s',   env:epics_env, cmd:'groupca DAQ:ASC 0 '+groups+' --prod'},
 {                         id:'groupca',    flags:'s',   env:epics_env, cmd:'groupca DAQ:ASC 0 2 6'},
 {                         id:'procstat',    flags:'p',                  cmd:'procstat p'+platform+'.cnf.last'},

# set the phase2 transition timeout to 20s. this is because the teb
# has a 16s timeout for slow PVA detectors coming through the gateway.
# both can be reduced if/when we get consistent behavior from gateways.
# { host: collect_host,     id:'control',     flags:'spu', env:epics_env, cmd:f'control -P {hutch}:0 -B DAQ:ASC -x 0 -C BEAM {auth} {url} -d {cdb}/configDB -t trigger -S 1 -T 20000 -r /dev/null'}, # -V {elog_cfg}
 { host: collect_host,     id:'control',     flags:'spu', env:epics_env, cmd:f'control -P {hutch}:{station} -B DAQ:ASC -x 0 -C BEAM {auth} {url} -d {cdb}/configDB -t trigger -S 1 -T 20000'}, # -V {elog_cfg}
 {                         id:'control_gui', flags:'p',                  cmd:f'control_gui -H {collect_host} --uris {cdb} --expert {auth} --loglevel WARNING'},

 { host: 'drp-det-cmp002', id:'teb0',        flags:'spu',                cmd:task_set+'teb '+'-P '+hutch+' -C '+collect_host+' -M '+prom_dir+' -k '+kwargs},

 { host: 'drp-det-cmp002', id:'timing_1',    flags:'spu',                cmd:drp_cmd0+' -l 0x4 -D ts'},
 { host: 'drp-det-cmp002', id:'epics_0',     flags:'spu', env:epics_env,  cmd:ea_cmd0+' -l 0x2 -T 4000000'},

 #{ host: 'drp-det-cmp003', id:'jungfrau_0',     flags:'sxpu',  env:epics_env, cmd:drp_cmd0+' -l 0xf -D jungfrau -k segNums=0_1_2_3'},
 { host: 'drp-det-cmp003', id:'jungfrau_0',     flags:'sxpu',  env:epics_env, cmd:drp_cmd0+' -l 0x1 -D jungfrau -k segNums=0,ep_provider=sockets,ep_domain=enp1s0f0'},
 #{ host: 'drp-det-cmp001', id:'jungfrau_0',     flags:'sxpu',  env:epics_env, cmd:drp_cmd0+' -l 0x7 -D jungfrau -k segNums=0_1_2 -vvv'},
]

procmgr_ami = [
#
# ami
#
 { host:ami_manager_node, id:'ami-global',  flags:'s', env:epics_env, cmd:f'ami-global --hutch {hutch} --prometheus-dir {prom_dir} -N 0 -n {ami_num_workers}' },
 { host:ami_manager_node, id:'ami-manager', flags:'s', cmd:f'ami-manager --hutch {hutch} --prometheus-dir {prom_dir} -n {ami_num_workers*ami_workers_per_node} -N {ami_num_workers}' },
 {                        id:'ami-client',  flags:'s', cmd:f'ami-client -H {ami_manager_node} --prometheus-dir {prom_dir} --hutch {hutch}' },

]

#
# ami workers
#
for N, worker_node in enumerate(ami_worker_nodes):
    procmgr_ami.append({ host:worker_node, id:f'meb{N}', flags:'spu',
                         cmd:f'{task_set} monReqServer -P {hutch} -C {collect_host} -M {prom_dir} -d -q {ami_workers_per_node} -k {kwargs}' })
    procmgr_ami.append({ host:worker_node, id:f'ami-node_{N}', flags:'s', env:epics_env,
                         cmd:f'ami-node --hutch {hutch} --prometheus-dir {prom_dir} -N {N} -n {ami_workers_per_node} -H {ami_manager_node} --log-level warning worker -b {heartbeat_period} psana://shmem={hutch}' })

procmgr_config.extend(procmgr_ami)
