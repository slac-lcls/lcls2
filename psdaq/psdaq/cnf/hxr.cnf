if not platform: platform = '4'

ld_lib_path = f'LD_LIBRARY_PATH={CONDA_PREFIX}/epics/lib/linux-x86_64:{CONDA_PREFIX}/pcas/lib/linux-x86_64'
epics_env = ld_lib_path
manta_env = 'EPICS_PVA_ADDR_LIST=172.21.140.33 EPICS_PVA_AUTO_ADDR_LIST=NO'+' '+ld_lib_path
hsd_epics_env = 'EPICS_PVA_ADDR_LIST=172.21.152.255'+' '+ld_lib_path
andor_epics_env = 'EPICS_PVA_ADDR_LIST=172.21.140.55 EPICS_PVA_AUTO_ADDR_LIST=NO'+' '+ld_lib_path

collect_host = 'drp-srcf-cmp032'

# readout group 4 is for epixhr (L0Delay change)
# readout group 5 is for manta
groups = platform
hutch, station, user = ('tst', 4, 'tstopr')
# use the dev logbook to get the tst expts for epixhr running -cpo
#auth = ' --user {:} '.format(user)
#url  = ' --url https://pswww.slac.stanford.edu/ws-auth/lgbk/ '
cdb  = 'https://pswww.slac.stanford.edu/ws-auth/configdb/ws'

#
#  drp variables
#
prom_dir = f'/cds/group/psdm/psdatmgr/etc/config/prom/{hutch}' # Prometheus
data_dir = '/cds/data/drpsrcf'
trig_dir = '/cds/home/opr/rixopr/scripts/trigger'

task_set = 'taskset -c 4-63'
batching = 'batching=yes'
directIO = 'directIO=yes'
scripts  = f'script_path={trig_dir}'

std_opts = f'-P {hutch} -C {collect_host} -M {prom_dir}'
std_opts0 = f'{std_opts} -o {data_dir} -d /dev/datadev_0 -k {batching},{directIO}'
std_opts1 = f'{std_opts} -o {data_dir} -d /dev/datadev_1 -k {batching},{directIO}'

teb_cmd  = task_set+' teb '            +std_opts+' -k '+scripts
meb_cmd  = task_set+' monReqServer '   +std_opts

drp_cmd0 = task_set+' drp '            +std_opts0
drp_cmd1 = task_set+' drp '            +std_opts1
pva_cmd0 = task_set+' drp_pva '        +std_opts0
pva_cmd1 = task_set+' drp_pva '        +std_opts1
udp_cmd0 = task_set+' drp_udpencoder ' +std_opts0
udp_cmd1 = task_set+' drp_udpencoder ' +std_opts1
bld_cmd0 = task_set+' drp_bld '        +std_opts0+' -k interface=eno1'
bld_cmd1 = task_set+' drp_bld '        +std_opts1+' -k interface=eno1'

elog_cfg = '/cds/group/pcds/dist/pds/rix/misc/elog_rix.txt'

ea_cfg = '/cds/group/pcds/dist/pds/rix/misc/epicsArch.txt'
ea_cmd0 = task_set+' epicsArch '+std_opts0+' '+ea_cfg
ea_cmd1 = task_set+' epicsArch '+std_opts1+' '+ea_cfg

#
#  ami variables
#
heartbeat_period = 1000 # units are ms

ami_workers_per_node = 4
ami_worker_nodes = ["drp-srcf-cmp032"]
ami_num_workers = len(ami_worker_nodes)
ami_manager_node = "drp-srcf-cmp032"

# procmgr FLAGS: <port number> static port number to keep executable
#                              running across multiple start/stop commands.
#                "X" open xterm
#                "s" send signal to child when stopping
#
# HOST       UNIQUEID      FLAGS  COMMAND+ARGS
# list of processes to run
#   required fields: id, cmd
#   optional fields: host, port, flags, conda, env, rtprio
#     flags:
#        'x' or 'X'  -> xterm: open small or large xterm for process console
#        's'         -> stop: sends ctrl-c to process
#        'u'         -> uniqueid: use 'id' as detector alias (supported by acq, cam, camedt, evr, and simcam)

procmgr_config = [
 {                          id:'procstat',    flags:'p',                  cmd:'procstat p'+platform+'.cnf.last'},

 #{ host: collect_host,      id:'control',     flags:'spu', env:epics_env, cmd:f'control -P {hutch}:{station} -B DAQ:NEH -x 7 -C BEAM {auth} {url} -d {cdb}/configDB -t trigger -S 1 -T 20000 -V {elog_cfg}'},
 #{                          id:'control_gui', flags:'p',                  cmd:f'control_gui -H {collect_host} --uris {cdb} --expert {auth} --loglevel WARNING'},
 { host: collect_host,      id:'control',     flags:'spu', env:epics_env, cmd:f'control -P {hutch}:{station} -B DAQ:NEH -x 7 -C BEAM -d {cdb}/configDB -t trigger -S 1 -T 20000 -V {elog_cfg}'},
 {                          id:'control_gui', flags:'p',                  cmd:f'control_gui -H {collect_host} --uris {cdb} --expert --loglevel WARNING'},

 { host: 'drp-srcf-cmp032', id:'teb0',        flags:'spu',                cmd:teb_cmd},

 { host: 'drp-srcf-cmp032', id:'timing_1',    flags:'spu',                cmd:drp_cmd1+' -l 0x1 -D ts'},

 { host: 'drp-srcf-cmp032', id:'bld_0',       flags:'spux', env:epics_env, cmd:bld_cmd1+' -l 0x2 -D xppsb2beammon'},

 {                          id:'groupca',    flags:'s',   env:epics_env, cmd:'groupca DAQ:NEH 7 '+groups},
 { host: 'drp-srcf-cmp014', id:'epixhr_0',  flags:'sxpu',  env:epics_env, cmd:drp_cmd0+' -l 0x1 -D epixhr2x2'},

]

# cpo: this formula should be base_port=5555+50*platform+10*instance
# to minimize port conflicts for both platform/instance
platform_base_port = 5555+50*int(platform)
for instance, base_port in {"first": platform_base_port,}.items():
    procmgr_ami = [
      { host:ami_manager_node, id:f'ami-global_{instance}',  flags:'s', env:epics_env, cmd:f'ami-global -p {base_port} --hutch {hutch}_{instance} --prometheus-dir {prom_dir} -N 0 -n {ami_num_workers}' },
      { host:ami_manager_node, id:f'ami-manager_{instance}', flags:'s', cmd:f'ami-manager -p {base_port} --hutch {hutch}_{instance} --prometheus-dir {prom_dir} -n {ami_num_workers*ami_workers_per_node} -N {ami_num_workers}' },
      {                        id:f'ami-client_{instance}',  flags:'s', cmd:f'ami-client -p {base_port} -H {ami_manager_node} --prometheus-dir {prom_dir} --hutch {hutch}_{instance}' },
#      {                        id:f'ami-client_{instance}_acr',  flags:'s', cmd:f'ami-client -l rix_acr_hsd_feedback.fc -p {base_port} -H {ami_manager_node} --prometheus-dir {prom_dir} --hutch {hutch}_{instance}_acr -g "acr_graph"'},
#      {                        id:f'acr_server',  flags:'s', cmd:f'python rix_acr_hsd_feedback.py -P RIX:ACR'},
    ]

    # ami workers
    for N, worker_node in enumerate(ami_worker_nodes):
        procmgr_ami.append({ host:worker_node, id:f'meb{N}_{instance}', flags:'spu',
                             cmd:f'{meb_cmd} -t {hutch}{instance} -d -n 64 -q {ami_workers_per_node}' })
        procmgr_ami.append({ host:worker_node, id:f'ami-node_{N}_{instance}', flags:'s', env:epics_env,
                             cmd:f'ami-node -p {base_port} --hutch {hutch}_{instance} --prometheus-dir {prom_dir} -N {N} -n {ami_workers_per_node} -H {ami_manager_node} --log-level warning worker -b {heartbeat_period} psana2://shmem={hutch}{instance}' })

    procmgr_config.extend(procmgr_ami)
